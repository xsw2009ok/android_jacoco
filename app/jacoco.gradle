apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
}
//源代码路径，你有多少个module，你就在这写多少个路径
def coverageSourceDirs = [
//        "app/src/main/java",
        "app/src/main/java/com/songguo/qa/c/androidjacocotest",
]

//class文件路径，就是我上面提到的class路径，看你的工程class生成路径是什么，替换我的就行
def coverageClassDirs = [
        'app/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes'
]

//这个就是具体解析ec文件的任务，会根据我们指定的class路径、源码路径、ec路径进行解析输出
task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = trueonRequestPermissionsResult
    }

    classDirectories = fileTree(
            dir: './build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*ViewInjector*.class',
                       '**/*FinishListener*.class',
                       '**/*InstrumentedActivity*.class',
                       '**/*JacocoInstrumentation*.class'

            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/outputs/code-coverage/connected/coverage.ec")

    doFirst {

        new File("$buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}



void basicTestCoverageVerificationConfig(JacocoCoverageVerification task
                                         , String[] includeSources = rootProject.ext.verifyService
                                         , String[] excludeSources = ['*Kt']
                                         , BigDecimal instructionMinimum = 0.3) {
    task.violationRules {
        //以类为单位验证指令覆盖率
        rule {
            element = 'CLASS'
            includes = includeSources
            excludes = excludeSources
            limit {
                minimum = instructionMinimum
            }
        }

        //验证行覆盖率
        rule {
            element = 'CLASS'
            includes = includeSources
            excludes = excludeSources
            limit {
                counter = 'LINE'
                minimum = 0.3
            }
        }

        //验证代码条件分支覆盖率
        rule {
            enabled = true
            element = 'CLASS'
            includes = includeSources
            excludes = excludeSources

            limit {
                counter = 'BRANCH'
                minimum = 0
            }
        }

        /**
         * 复杂度覆盖率。代码不同执行路径组合的覆盖率
         * https://www.eclemma.org/jacoco/trunk/doc/counters
         */
        rule {
            enabled = true
            element = 'CLASS'
            includes = includeSources
            excludes = excludeSources

            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                minimum = 0
            }
        }
    }
    task.onlyIf = { true }
}